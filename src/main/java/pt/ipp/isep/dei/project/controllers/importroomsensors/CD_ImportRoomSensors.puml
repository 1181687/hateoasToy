@startuml
skinparam linetype ortho

skinparam class {
	BackgroundColor PaleTurquoise
	ArrowColor Black
	BorderColor Black
	FontStyle Bold
}

hide circle

ImportRoomSensors "1" --> "1" ImportRoomSensorsController
ImportRoomSensorsController "1" -right-> "1" HouseService
ImportRoomSensorsController "1" --> "1" RoomSensorMapper :uses
RoomRepository "1"-> "0*" Room
Room "1" -down-> "0*"  Sensor
ImportRoomSensorsController "1" -> "*" Sensor
ImportRoomSensorsController "1" -> "1" "<<ProjectFileReader>>"
RoomSensorMapper "1" -up-> "1" RoomSensorDTO : creates
HouseService "1" -right-> "*" RoomRepository
JSONReader -down-* "<<ProjectFileReader>>" : implements
JSONReader -up-> RoomSensorMapper : uses

Class ImportRoomSensors {
-controller: ImportRoomSensorsController
+run()
}

Class ImportRoomSensorsController {
-houseService: HouseService
-allSensorInTheGeoAreas: RoomRepository
-sensor: Sensor
-readingDTOList : List<Object>
+createReader()
+readFile()
+importReadings()
+checkIfSensorExistsById()
+isDateTimeBeforeSensorStartingDate()
}


Class RoomSensorMapper {
+mapToEntity()
+mapToDTO()
}

Class JSONReader {
-readerName : String
+readFile()
+getTypeName()
-parseReadings()
}

Class HouseService {
-geoAreaList: HouseService
+getAllSensors()
}

Class RoomRepository {
-listOfSensors: List<Sensor>
+checkIfSensorExistsById()
+getSensorById()
}

Class Sensor {
-id: String;
-startingDate LocalDateTime
-listOfReadings: List<Reading>
+addReading()
}

Class RoomSensorDTO {
-id: String
-value: double
-dateTime: LocalDateTime
-unit: String
+getValue()
+setValue()
+getDateTime()
+setDateTime()
+getId()
+setId()
+getUnit()
+setUnit()
}

Interface "<<ProjectFileReader>>" {
+getTypeName()
+readFile()
}
@enduml