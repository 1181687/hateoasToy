@startuml
skinparam linetype ortho

skinparam class {
	BackgroundColor PaleTurquoise
	ArrowColor Black
	BorderColor Black
	FontStyle Bold
}

hide circle

GetDayWithHighest\nTemperatureAmplitude\nUI "1" -> "1" GetDayWithHighestTemperatureAmplitude\nController
GetDayWithHighestTemperatureAmplitude\nController "1" -right-> "1" House
House "1" --> "1" GeographicalArea : directly inserted in
GeographicalArea "1" -left-> "1" SensorList
SensorList "1" -left-> "0*" Sensor
Sensor "1" -left-> "0*" Reading

Class GetDayWithHighest\nTemperatureAmplitude\nUI {
- GetDayWithHighestTemperature\nAmplitudeController controller
+run()
}

Class GetDayWithHighestTemperatureAmplitude\nController {
- House house;
- SensorType sensorTypeTemperature
- Map<LocalDate, Double> mapOfDailyAmplitude;
- Map<LocalDate, Double> mapResult;
+getDailyAmplitudeInIntervalInHouseArea()
+getHighestDailyAmplitudeInHouseArea()
+getDayWithHighestTemperatureAmplitude()
+displayResults()
}

Class House {
-GeographicalArea insertedGeoArea
-Address completeAddress
+getDailyAmplitudeInIntervalInHouseArea()
+getHighestDailyAmplitudeInHouseArea()
}

Class GeographicalArea {
-SensorList geoAreaSensorList
-Location location
+getSensorListByTypeInAPeriod()
+getNearestSensorsToLocation()
+getSensorWithMostRecentReading()
+getMaximumValueOfDay()
+getLowestValueOfDay()
}

Class SensorList {
-List<Sensor> listOfSensors
+getSensorWithMostRecentReading()
+getSensorsInGeographicalAreaByType()
+getNearestSensorsToLocation()
+getSensorWithMostRecentReading()
+getMaximumValueOfDay()
+getLowestValueOfDay()
}

Class Sensor {
-List<Reading> listOfReadings
-SensorType sensorType
-Location location
+getSensorType()
+checkMeasurementExistenceBetweenDates()
+getSensorWithMostRecentReading()
+distanceBetweenSensorAndLocation()
+getMeasurementValueBetweenDates()
+getMaximumValueOfDay()
+getLowestValueOfDay()
}

Class Reading {
-double value
-LocalDateTime dateTime
+getValue()
+getDateTime()
}

@enduml