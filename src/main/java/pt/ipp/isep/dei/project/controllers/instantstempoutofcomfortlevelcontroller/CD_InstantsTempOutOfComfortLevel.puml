@startuml
skinparam linetype ortho

skinparam class {
	BackgroundColor PaleTurquoise
	ArrowColor Black
	BorderColor Black
	FontStyle Bold
}

hide circle



InstantsTempOutOfComfortLevelUI "1" --> "1" InstantsTempOutOfComfortLevelController
InstantsTempOutOfComfortLevelController "1" --> "1" HouseService
InstantsTempOutOfComfortLevelController "1" --> "1" "RoomService"
InstantsTempOutOfComfortLevelController "1" -right-> "1" "SensorsService"
HouseService "1" --> "1" AddressMapper: uses
HouseService "1" --> "1" RoomMapper: uses
HouseService "1" --> "1" HouseGridMapper: uses
HouseService "1" -right-> "1" House: updates
GeoAreaSensor "1" -down-> "1" Location: uses
GeoAreaSensor "1" -down-> "*" Reading: uses
JSONReader "1" -down-> "1" HouseGridMapper: uses
JSONReader "1" -left-> "1" HouseDTO: uses
AddressMapper "1" -down-> "1" AddressDTO: creates
RoomMapper "1" --> "1" RoomDTO: creates
HouseGridMapper "1" --> "1" HouseGridDTO: creates


JSONReader "1" -right-* "1" "<<ProjectFileReader>>" : implements

Class InstantsTempOutOfComfortLevelUI {
- InstantsTempOutOfComfortLevelController controller
+ run()

}

Class InstantsTempOutOfComfortLevelController {
- SensorTypeId sensorTypeId
- RoomId roomId
- SensorId roomSensorId
- LocationDTO location
- GeoAreaIdDTO geoAreaId
- Map<LocalDate, List<Double>> comfortTemp
- Map<LocalDateTime, Double> mapInstantsOutOfComfortTemp
- List<Reading> roomReadings
- int category
- int option
- List<LocalDateTime> listOfInstantsOutOfComfortTemp
+ setCategory ()
+ setOption ()
+ getAllRoomsDTO ()
+ isRoomListEmpty ()
+ setRoomId ()
+ existTempSensors ()
+ getComfortTemperature ()
+ setSensorID ()
- getInstantsOutOfComfortTemperature ()
+ getInstantListOutOfComfortLevel ()
+ existsDaysWithoutComfortTemp ()
+ getDaysWithoutComfortTemp ()
+ readingsHouseAreaAndRoom ()
}



Class RoomService {
+ getAllRoomsDTO()
+ isListOfRoomsEmpty()
+ getAllRoomsDTO()
}

Interface RoomRepository {
+ findAll()
}


Class RoomSensor {
- SensorId id
- List<Reading> readings
- SensorTypeId sensorTypeId
- RoomId roomId
+ existReadingsBetweenDates ()
+ getReadings ()

}

Class RoomSensorService {
+ getSensorId ()
+ getReadingsDTO ()
+ existSensors ()
+ getSensorId ()
+ getSensorById ()
+ getRoomSensor ()
}


Interface RoomSensorRepository {
+ findByRoomId ()
+ existsRoomSensorsByRoomIdAndSensorTypeId ()
}

Class GeoAreaSensorService {
+ getComfortTemperature ()
+ getMapAverageOfDailyMeasurements ()
+ getSensorsWithReadingsInInterval ()
+ getNearestSensorWithMostRecentReading ()
+ getNearestSensors ()
+ getDailyAverageBySensorId ()
+ existsDaysWithoutComfortTemp ()
+ getDaysWithoutComfortTemp ()
}

Class HouseService {
+ getHouse()
}

Interface HouseRepository {
}

Class House {
+ getLocation()
+ getGeoAreaId()
}

Class Address {
- GeoAreaId geoAreaId
+ getLocation()
+ getGeoAreaId()
}

Class Location{
+ distanceBetweenTwoLocations ()
}

Class RoomDTO {
- String id
- String description
- int houseFloor
- double width
- double length
- double height
+ get ()
+ set ()
+ getRooms ()
}

Class RoomMapper {
+ newRoomDTO ()
+ mapToDTO ()
+ mapToEntity ()

}

Interface "GeoAreaSensorRepository" {
+ findByGeoAreaIdAndSensorTypeId ()
+ findGeoAreaSensorsById ()
}


Class GeoAreaSensor {
+ existReadingsBetweenDates()
+ getLocation ()
+ getReadingsBetweenDates ()
+ getDailyAverage ()
+ getMostRecentValidReading ()
}

Class Reading {
- LocalDateTime date
- double value
+ get ()
}

Class SensorService {
+ existSensors ()
+ getComfortTemperature ()
+ getSensorId ()
+ getInstantsOutOfComfortTemperature ()
+ getInstantListOutOfComfortLevel ()
+ existSensors ()
+ existsDaysWithoutComfortTemp ()
+ getDaysWithoutComfortTemp ()
+ getRoomReadingsDTO ()
}



@enduml