@startuml
skinparam sequenceMessageAlign center
skinparam sequence {
    ArrowColor Black
    ActorBorderColor DarkBlue
    LifeLineBorderColor black
    LifeLineBackgroundColor LightGrey

    ParticipantBorderColor Black
    ParticipantBackgroundColor LightGrey
    ParticipantFontStyle Bold

    ActorBackgroundColor DimGrey
    ActorFontColor DeepSkyBlue
    ActorFontStyle Bold
    ActorFontSize 17
    ActorFontName Aapex
}

autonumber
actor RegularUser
activate RegularUser
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": instantsOutOfTempComfort
activate ":InstantsOutOf\nTempComfortLevel\nUI"
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: Rose above or Fell below option
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": Chosen option
activate ":InstantsOutOf\nTempComfortLevel\nUI"
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : Chosen option
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" -> ":HouseService" : location=getLocation()
activate ":HouseService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":HouseService" : geoAreaId=getGeoAreaId()
deactivate ":HouseService"
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: House category
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": Chosen category
activate ":InstantsOutOf\nTempComfortLevel\nUI"
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : Chosen category
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : getRoomList()
":InstantsOutOf\nTempComfortLevel\nController" -> ":RoomService": getRoomList()
activate ":RoomService"
":InstantsOutOf\nTempComfortLevel\nController" <-- ":RoomService": RoomListDTO
deactivate ":RoomService"
":InstantsOutOf\nTempComfortLevel\nUI" <-- ":InstantsOutOf\nTempComfortLevel\nController" : RoomListDTO
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
RegularUser <-- ":InstantsOutOf\nTempComfortLevel\nUI" : Room List content
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI":  Selected Room
activate ":InstantsOutOf\nTempComfortLevel\nUI"
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : roomId
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" <-- ":InstantsOutOf\nTempComfortLevel\nController" : sensorId
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
RegularUser <-- ":InstantsOutOf\nTempComfortLevel\nUI" : Insert start and end Date
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": startDate
activate ":InstantsOutOf\nTempComfortLevel\nUI"
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": endDate
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : getComfortTemperature\n(startDate, endDate)
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": getComfortTemperature(startDate, endDate, option,\n category, location, geoAreaId, sensorTypeId)
activate ":SensorsService"
ref over ":SensorsService"
getComfortTemperature
end
":InstantsOutOf\nTempComfortLevel\nController" <-- ":SensorsService" : mapComfortTemp
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": getRoomReadingsDTO(sensorId)
activate ":SensorsService"
ref over ":SensorsService"
getRoomReadings
end
":InstantsOutOf\nTempComfortLevel\nController" <-- ":SensorsService" : roomReadingsDTO
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": getMapOutOfTempComfort\n(mapComfortTemp, roomReadingsDTO)
activate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" <-- ":SensorsService" : mapInstantsOutOfTempComfort
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": getListOfInstantsOutOf\nComfortTemp(mapInstantsOutOfTempComfort)
activate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" <-- ":SensorsService" : listOfInstantsOutOfComfortTemp
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nUI" <-- ":InstantsOutOf\nTempComfortLevel\nController"  : listOfInstantsOutOfComfortTemp
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
RegularUser <-- ":InstantsOutOf\nTempComfortLevel\nUI": List Of Instants \nOut Of Comfort Temperature
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
deactivate RegularUser



@enduml