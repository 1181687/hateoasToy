@startuml
skinparam sequenceMessageAlign center
skinparam sequence {
    ArrowColor Black
    ActorBorderColor DarkBlue
    LifeLineBorderColor black
    LifeLineBackgroundColor LightGrey

    ParticipantBorderColor Black
    ParticipantBackgroundColor LightGrey
    ParticipantFontStyle Bold

    ActorBackgroundColor DimGrey
    ActorFontColor DeepSkyBlue
    ActorFontStyle Bold
    ActorFontSize 17
    ActorFontName Aapex
}

autonumber

actor RegularUser
activate RegularUser
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": instantsOutOfTempComfort
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: Ask if Bellow or Above
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": x - option
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : x - option
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: Ask house category
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": x - category
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : x - category
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : x - getRoomList()
activate ":InstantsOutOf\nTempComfortLevel\nUI"
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" -> ":RoomService": x - getRoomList
":RoomService" --> ":InstantsOutOf\nTempComfortLevel\nController": RoomListDTO
":InstantsOutOf\nTempComfortLevel\nController" --> ":InstantsOutOf\nTempComfortLevel\nUI" : RoomListDTO
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
deactivate ":InstantsOutOf\nTempComfortLevel\nUI"
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: x - Show room list content
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": x - selected room
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : x - roomId
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: Ask for start Date and end Date
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": x - startDate
RegularUser -> ":InstantsOutOf\nTempComfortLevel\nUI": x - endDate
":InstantsOutOf\nTempComfortLevel\nUI" -> ":InstantsOutOf\nTempComfortLevel\nController" : x - getComfortTemperature(startDate, endDate)
activate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": x - getComfortTemperature(startDate, endDate, option,\n category, location, geoAreaID, sensorTypeID)
activate ":SensorsService"
":SensorsService" --> ":InstantsOutOf\nTempComfortLevel\nController" : mapComfortTemp
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": x - getRoomReadings(RoomId)
activate ":SensorsService"
":SensorsService" --> ":InstantsOutOf\nTempComfortLevel\nController" : roomReadingDTO
deactivate ":SensorsService"
":InstantsOutOf\nTempComfortLevel\nController" -> ":SensorsService": x - getListOfInstantsOutOfComfortTemp(mapComfortTemp, roomReadingDTO)
activate ":SensorsService"
":SensorsService" --> ":InstantsOutOf\nTempComfortLevel\nController" : listOfInstantsOutOfComfortTemp
deactivate ":SensorsService"
deactivate ":InstantsOutOf\nTempComfortLevel\nController"
":InstantsOutOf\nTempComfortLevel\nController" --> ":InstantsOutOf\nTempComfortLevel\nUI" : listOfInstantsOutOfComfortTemp
":InstantsOutOf\nTempComfortLevel\nUI" --> RegularUser: List Of Instants \nOut Of Comfort Temperature
deactivate RegularUser

ref over ":GeographicalArea"
getLastLowestMaximumReading
end

@enduml