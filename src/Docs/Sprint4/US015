NUMBER: US015

DESCRIPTION: As an Administrator, I want to import geographical areas and sensors from a JSON file.

TEAM MEMBERS: Developer - Sónia Silva; QA - Diana Ferreira;

ACCEPTANCE CRITERIA:

General Criteria:
- Correct Sequence and Class Diagrams.
- JavaDoc documentation in both code and tests.
- JUnit conventions in code and tests. (eg. tests should be named like this:
                                        testNameOfTheMethod_conditionThatIsBeingTested_expectedResult).
- All code, comments and documentation are in proper English.

Specific Criteria:
- given - The user (Admin) imports geographical areas and sensors from a JSON file.
- when - The user chooses option "1" from Menu (Administrator), then option "2" (Geographical Area) and then option "9"
(Import geographical areas and sensors from JSON File). Then User inserts the name of the JSON file to be imported
(JSONfile.json). He/She then chooses the option "YES" in "Do you want to import these geographic areas and their
sensors? (Y/N)"
- then:
   * When the user inserts the name of the file the following message appears ("This is the content of the chosen file.")
with the contents of the file.
   * When he/she chooses the "Yes" option the following message appears ("The JSON file was imported with success.")
- but - The following messages are displayed:

"ERROR: There's no such file with that name." - when no file or directory is found when the user inputs the name of the
file to be imported.


Test Criteria:
- All acceptance tests with "Process finished with exit code 0" message:

Controller Test Class
- testImportGeographicalAreaAndSensors: returns True
- testImportGeographicalAreaAndSensors: returns False

GeographicalAreaList Test Class
- testAddGeo_geoAreaAlreadyThere: returns False

GeographicalAreaMapper Test Class
-testMapToDTO_mapToDTO: returns a Geo Area DTO

GeographicalAreaDTO Test Class
- testGetIdTest_getId: returns ID S001
- testsetId_changeId: retuns ID S002
- getSensorNameTest_getSensorName: returns Sensor1
- setSensorNameTest_changeSensorName: returns Sensor2
- getGeographicalAreaTypeTest_getGeoAreaType: returns City
- setGeographicalAreaTypeTest_newGeoAreaType: returns NewGeoArea
- setAndGetWidthTest_getWidthAndChangeWidth: returns 10
- setAndGetLengthTest_getLengthAndChangeLength: returns 15
- setAndGetLatitudeTest_getLatitudeAndChangeLatitude: returns 20
- setAndGetLongitudeTest_getLongitudeAndChangeLongitude: returns 25
- setAndGetAltitudeTest_getAltitudeAndChangeAltitude: returns 30
- getSensors_get: returns Temperature Sensor


JSONReader Test Class
- testReadJSONFileToList: returns geoAreaDTO


SensorMapper Test Class
- testMapToDTO: returns GeoAreaDTO


SensorDTO Test Class
- testGetId_get: returns isepTemperature
- testSetId_set: returns ISEP
- testGetName_get: returns temperatureSensor
- testSetName_set: returns newName
- testGetStartingDate_get: returns localdate
- testSetStartingDate_set: returns localdate -1 day
- testGetSensorType_get: returns temperature
- testSetSensorType_set: returns rainfall
- testGetLocation_get: returns location (comprised of latitude, longitude and elevation)
- testSetLocation_set: returns new location (comprised of new latitude, longitude and elevation)
- testGetUnits_get: returns ºC
- testSetUnits_set: returns F


ASSUMPTIONS:
- Regarding sensors, only the geographical area sensors are imported (not the House sensors).
- There is User interaction: the application asks the user the location of the files to be imported.
- For user convenience the data to be imported is in the form of two DTO (Geographical Area DTO and SensorDTO)
thar are imported at the same time (in a single method) instead of importing the two referred DTO's one at a time.

